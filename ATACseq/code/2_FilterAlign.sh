##Filter and remove duplicate from bams generated by 1_Bowtie2.sh
#Yuyan Cheng
#12-25-19    

START=$SECONDS   
INDIR=$1
GENOME=$2
MAPQ_THR=30

for bam in $INDIR/*.sorted.markDup.bam;do

	name_prefix=${bam/.sorted.markDup.bam/}
    sortedname=$name_prefix'.unique.sorted'
    
    # temporary file names
    
    del_mitch_read_bamfile=$name_prefix'.Bowtie2_del_Mitch.bam'
    uniq_mapped_read_bamfile=$name_prefix'.Bowtie2_UniqMappedRead.bam'
    del_random_read_bamfile=$name_prefix'.Bowtie2_del_Random.bam'

    
 if [ ! -f $sortedname'.rmDup.bam' ]; then
	if [ ! -f $sortedname.bam ]; then
	  #remove chr1 ... chrY and random stuff
	  if [ ! -f $del_random_read_bamfile ]; then
		samtools view -h $bam | awk '(substr($1, 1, 1)=="@") || (( $3 ~ /^chr([1-9]|2[0-2]|1[0-9]|X|M)$/ ) && ( ( $7 ~ /^chr([1-9]|2[0-2]|1[0-9]|X|M)$/ ) || ($7=="=") || ($7=="*") ))' - | samtools view -bhS - > $del_random_read_bamfile
		#nread_del_random_stuff=`samtools view $del_random_read_bamfile | cut -f 1 | sort | uniq | wc -l`
	  fi
	#remove mitonchondria read
	  if [ ! -f $del_mitch_read_bamfile ]; then
	    nread_mappable=`samtools view $bam | cut -f 1 | sort | uniq | wc -l`
	    samtools view -h $del_random_read_bamfile | sed '/chrM/d;/random/d;/chrUn/d;/chrY/d' - | samtools view -Shb - > $del_mitch_read_bamfile 
		nread_del_mit=`samtools view $del_mitch_read_bamfile | cut -f 1 | sort | uniq | wc -l`
		rm $del_random_read_bamfile 
	  fi
	# create BAM file consisting of the uniquely mapped reads
	# the flag 1804 = read unmapped, mate unmapped, not primary alignment, read quality low, PCR / optical duplicate
	  if [ ! -f $uniq_mapped_read_bamfile ]; then
		samtools view -hb -F 1804 $del_mitch_read_bamfile > $uniq_mapped_read_bamfile
		uniq_mapped_read=`samtools view $uniq_mapped_read_bamfile | cut -f 1 | sort | uniq | wc -l`
		rm $del_mitch_read_bamfile
	  fi
	
	  if [[ ! -f $sortedname.bam ]]; then
	    samtools view -hb -q $MAPQ_THR $uniq_mapped_read_bamfile | samtools sort -o $sortedname.bam - 
	    nread_qual=`samtools view $sortedname'.bam' | cut -f 1 | sort | uniq | wc -l`
	    rm $uniq_mapped_read_bamfile
	  fi
	fi
	
	#index
	if [[ ! -f $sortedname'.bam.bai' ]]; then
	    samtools index $sortedname'.bam'
    elif [[ $sortedname'.bam.bai' -ot $sortedname'.bam' ]]; then
	# here -ot corresponds to "older than"
	    samtools index $sortedname'.bam'
    fi
  
    # note down the read count
	out_readcount_file=$name_prefix'_Read_Count_Stat.txt'
	if [ ! -f $out_readcount_file ]; then
		echo -e 'NumMappableRead \t nread_del_mit \t UniqMappedRead \t ReadQualThr' > $out_readcount_file
	    echo -e '\n'$nread_mappable'\t'$nread_del_mit'\t'$uniq_mapped_read'\t'$nread_qual >> $out_readcount_file

    fi
       
    #=========================
    # for the generated alignment (with quality thresholding)
    # now remove the duplicates, and generate quality statistics
    #=========================
     # remove duplicated reads Picard
    if [[ -f $sortedname.bam ]]; then
        java -Xmx4G -jar $PICARD MarkDuplicates I=$sortedname.bam O=$sortedname'.rmDup.bam' M=$sortedname'.metricsDup' ASSUME_SORTED=true REMOVE_DUPLICATES=true VALIDATION_STRINGENCY=LENIENT
		
		if [ ! -f $sortedname'.rmDup.bam.bai' ]; then
			samtools index $sortedname.rmDup.bam
		elif [[	$sortedname'.rmDup.bam.bai' -ot $sortedname'.rmDup.bam' ]]; then
		    samtools index $sortedname.rmDup.bam
		fi
		
		
		if [ -f $sortedname'.rmDup.bam' ]; then
		rm $sortedname.bam
		rm $sortedname.bam.bai
		fi
		
    fi 
    
 fi 
 
 
 # generate insertSizeMetrics
 if [[ -f $sortedname'.rmDup.bam' ]]; then
        java -Xmx4G -jar $PICARD CollectInsertSizeMetrics \
        I=$sortedname'.rmDup.bam' O=$name_prefix'.unique.sorted.rmDup.InsertSizeMetrics' H=$name_prefix'.unique.sorted.rmDup.InsertSizeMetrics.pdf'
        
 fi   

done  


sleep 10
# hack to ensure job lasts 10 minutes to ensure no throttling
END=$SECONDS
ELAPSED=$((END-START))
echo $ELAPSED
if [ $ELAPSED -lt 600 ]; then
  TOSLEEP=$((600 - ELAPSED))
  sleep $TOSLEEP
fi